{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sabih Imran\\\\Desktop\\\\Runn Code\\\\Code\\\\WebPortal old 1\\\\WebPortal\\\\src\\\\Components\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Redirect } from \"react-router-dom\";\nimport { Typography } from \"@material-ui/core\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  input: {\n    color: \"white\"\n  },\n  submit: {\n    margin: \"10px 0px\"\n  },\n  error: {\n    color: \"red\"\n  }\n}));\nexport default function AuthForm(props) {\n  _s();\n\n  const classes = useStyles();\n  const validationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required(\"Email is required\"),\n    password: yup.string().min(6, \"Password must be atleast 6 characters long\").required(\"Password is required\")\n  });\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [error, setError] = useState(false);\n\n  const onSubmitHandler = values => {\n    console.log(values.email);\n    console.log(values.password);\n\n    if (values.email === \"admin1@gmail.com\" && values.password === \"admin1\") {\n      setError(false);\n      setLoggedIn(true);\n    } else {\n      setError(true);\n    }\n  };\n\n  const onChange = e => {\n    e.target.name == \"email\" ? setEmail(e.target.value) : setPassword(e.target.value);\n  };\n\n  if (loggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (props.isTeacher) {\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmitHandler,\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          as: TextField,\n          variant: \"standard\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          size: \"medium\",\n          id: \"email\",\n          label: \"Email Address\",\n          name: \"email\",\n          autoComplete: \"email\",\n          helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"email\",\n            style: {\n              color: \"red\",\n              fontWeight: \"bold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          as: TextField,\n          variant: \"standard\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          size: \"medium\",\n          name: \"password\",\n          label: \"Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"current-password\",\n          helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"password\",\n            style: {\n              color: \"red\",\n              fontWeight: \"bold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), error ? /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"MuiFormHelperText-root\",\n          align: \"center\",\n          variant: \"body2\",\n          className: classes.error,\n          children: \"Username or Password is incorrect!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this) : \" \", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: !(props.isValid || props.isSubmitting),\n          className: classes.submit,\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmitHandler,\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          as: TextField,\n          variant: \"standard\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          size: \"medium\",\n          id: \"email\",\n          label: \"Email Address\",\n          name: \"email\",\n          autoComplete: \"email\",\n          helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"email\",\n            style: {\n              color: \"red\",\n              fontWeight: \"bold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          as: TextField,\n          variant: \"standard\",\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          size: \"medium\",\n          name: \"password\",\n          label: \"Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"current-password\",\n          helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"password\",\n            style: {\n              color: \"red\",\n              fontWeight: \"bold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this), error ? /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"MuiFormHelperText-root\",\n          align: \"center\",\n          variant: \"body2\",\n          className: classes.error,\n          children: \"Username or Password is incorrect!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 19\n        }, this) : \" \", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: !(props.isValid || props.isSubmitting),\n          className: classes.submit,\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n} //     <form className={classes.form} noValidate autoComplete=\"off\" onSubmit={onSubmitHandler}>\n//       <Field\n//         as = {TextFields}\n//         variant=\"standard\"\n//         margin=\"normal\"\n//         id=\"standard-size-small\"\n//         size=\"small\"\n//         required\n//         fullWidth\n//         id=\"TeacherEmail\"\n//         label=\"Teacher ID\"\n//         name=\"email\"\n//         autoComplete=\"email\"\n//         autoFocus\n//         value = {email}\n//         onChange = {onChange}\n//       />\n//       <TextField\n//         variant=\"standard\"\n//         margin=\"normal\"\n//         id=\"standard-si\n//         ze-small\"\n//         size=\"small\"\n//         required\n//         fullWidth\n//         name=\"password\"\n//         label=\"Password\"\n//         type=\"password\"\n//         id=\"TeacherPass\"\n//         autoComplete=\"current-password\"\n//         value = {password}\n//         onChange = {onChange}\n//       />\n//       <Button\n//         type=\"submit\"\n//         fullWidth\n//         variant=\"contained\"\n//         color=\"secondary\"\n//         className={classes.submit}\n//       >\n//         Sign In\n//       </Button>\n//       {error && <Typography variant=\"body2\" className={classes.error}>Username or Password is incorrect!</Typography>}\n//       <Grid container>\n//         <Grid item xs>\n//           <Link href=\"\" variant=\"body2\">\n//             Forgot password?\n//           </Link>\n//         </Grid>\n//       </Grid>\n//     </form>\n//   );\n// } else {\n//   return (\n//     <form className={classes.form} noValidate autoComplete=\"off\" onSubmit={onSubmitHandler}>\n//       <TextField\n//         variant=\"standard\"\n//         margin=\"normal\"\n//         id=\"standard-size-small\"\n//         size=\"small\"\n//         required\n//         fullWidth\n//         id=\"AdminEmail\"\n//         label=\"Admin ID\"\n//         name=\"email\"\n//         autoComplete=\"email\"\n//         autoFocus\n//         value={email}\n//         onChange = {onChange}\n//       />\n//       <TextField\n//         variant=\"standard\"\n//         margin=\"normal\"\n//         id=\"standard-size-small\"\n//         size=\"small\"\n//         required\n//         fullWidth\n//         name=\"password\"\n//         label=\"Password\"\n//         type=\"password\"\n//         id=\"AdminPass\"\n//         autoComplete=\"current-password\"\n//         value={password}\n//         onChange = {onChange}\n//       />\n//       <Button\n//         type=\"submit\"\n//         fullWidth\n//         variant=\"contained\"\n//         color=\"secondary\"\n//         className={classes.submit}\n//       >\n//         Sign In\n//       </Button>\n//       {error && <Typography variant=\"body2\"  className={classes.error}>Username or Password is incorrect!</Typography>}\n//     </form>\n\n_s(AuthForm, \"nb7gZgjUCnl/GC4EAjtPyNTmbwI=\", false, function () {\n  return [useStyles];\n});\n\n_c = AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/Sabih Imran/Desktop/Runn Code/Code/WebPortal old 1/WebPortal/src/Components/AuthForm.js"],"names":["React","useState","Button","TextField","Link","Grid","makeStyles","Redirect","Typography","Formik","Form","Field","ErrorMessage","yup","useStyles","theme","input","color","submit","margin","error","AuthForm","props","classes","validationSchema","object","shape","email","string","required","password","min","setEmail","setPassword","loggedIn","setLoggedIn","setError","onSubmitHandler","values","console","log","onChange","e","target","name","value","isTeacher","initialValues","fontWeight","isValid","isSubmitting"],"mappings":"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;AAII,UAAA,KAAK,EAAC,WAJV;AAKI,UAAA,QAAQ,EAAE,EAAEE,KAAK,CAAC2B,OAAN,IAAiB3B,KAAK,CAAC4B,YAAzB,CALd;AAMI,UAAA,SAAS,EAAE3B,OAAO,CAACL,MANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADF;AAiED;AACF,C,CAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApRsBG,Q;UACNP,S;;;KADMO,Q","sourcesContent":["import React, {useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  input: {\r\n    color: \"white\",\r\n  },\r\n\r\n  submit: {\r\n    margin: \"10px 0px\",\r\n  },\r\n  error:{\r\n    color: \"red\"\r\n  }\r\n}));\r\n\r\nexport default function AuthForm(props) {\r\n  const classes = useStyles();\r\n  const validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .email(\"Please enter valid email\")\r\n        .required(\"Email is required\"),\r\n    password: yup.string()\r\n        .min(6, \"Password must be atleast 6 characters long\")\r\n        .required(\"Password is required\"),\r\n});\r\n\r\n   const [email, setEmail] = useState('');\r\n   const [password, setPassword] = useState('');\r\n   const [loggedIn, setLoggedIn] = useState(false);\r\n   const [error, setError] = useState(false);\r\n \r\n  const onSubmitHandler = (values) => {\r\n    console.log(values.email);\r\n    console.log(values.password);\r\n    if (values.email === \"admin1@gmail.com\" && values.password === \"admin1\")\r\n    {\r\n      setError(false);\r\n      setLoggedIn(true);\r\n    }\r\n    else\r\n    {\r\n     setError(true);\r\n    }\r\n  };\r\n\r\n  const onChange = (e)=>{\r\n     e.target.name == \"email\"? setEmail(e.target.value) : setPassword(e.target.value)\r\n  }\r\n\r\n  if(loggedIn)\r\n  {\r\n    return <Redirect to=\"/home\"/>\r\n  }\r\n  if (props.isTeacher) {\r\n    return (\r\n      <Formik\r\n      initialValues={props.initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmitHandler}\r\n  >\r\n\r\n      {(props) => (\r\n          <Form>\r\n              <Field\r\n                  as={TextField}\r\n                  variant=\"standard\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  size=\"medium\"\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  helperText={\r\n                      <ErrorMessage\r\n                          name=\"email\"\r\n                          style={{ color: \"red\", fontWeight: \"bold\" }}\r\n                      />\r\n                  }\r\n              />\r\n\r\n              <Field\r\n                  as={TextField}\r\n                  variant=\"standard\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  size=\"medium\"\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  helperText={\r\n                      <ErrorMessage\r\n                          name=\"password\"\r\n                          style={{ color: \"red\", fontWeight: \"bold\" }}\r\n                      />\r\n                  }\r\n              />\r\n              {error ? (\r\n                  <Typography className=\"MuiFormHelperText-root\" align=\"center\" variant=\"body2\" className={classes.error}>Username or Password is incorrect!</Typography>\r\n              ) : \" \"}\r\n              <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  disabled={!(props.isValid || props.isSubmitting)}\r\n                  className={classes.submit}\r\n              >\r\n                  Sign In\r\n              </Button>\r\n\r\n          </Form>\r\n      )}\r\n  </Formik>\r\n  );\r\n              }\r\n  else\r\n  {\r\n    return (\r\n      <Formik\r\n      initialValues={props.initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmitHandler}\r\n  >\r\n\r\n      {(props) => (\r\n          <Form>\r\n              <Field\r\n                  as={TextField}\r\n                  variant=\"standard\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  size=\"medium\"\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  helperText={\r\n                      <ErrorMessage\r\n                          name=\"email\"\r\n                          style={{ color: \"red\", fontWeight: \"bold\" }}\r\n                      />\r\n                  }\r\n              />\r\n\r\n              <Field\r\n                  as={TextField}\r\n                  variant=\"standard\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  size=\"medium\"\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  helperText={\r\n                      <ErrorMessage\r\n                          name=\"password\"\r\n                          style={{ color: \"red\", fontWeight: \"bold\" }}\r\n                      />\r\n                  }\r\n              />\r\n              {error ? (\r\n                  <Typography className=\"MuiFormHelperText-root\" align=\"center\" variant=\"body2\" className = {classes.error}>Username or Password is incorrect!</Typography>\r\n              ) : \" \"}\r\n              <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  disabled={!(props.isValid || props.isSubmitting)}\r\n                  className={classes.submit}\r\n              >\r\n                  Sign In\r\n              </Button>\r\n\r\n          </Form>\r\n      )}\r\n  </Formik>\r\n  );\r\n  }\r\n}\r\n\r\n  //     <form className={classes.form} noValidate autoComplete=\"off\" onSubmit={onSubmitHandler}>\r\n  //       <Field\r\n  //         as = {TextFields}\r\n  //         variant=\"standard\"\r\n  //         margin=\"normal\"\r\n  //         id=\"standard-size-small\"\r\n  //         size=\"small\"\r\n  //         required\r\n  //         fullWidth\r\n  //         id=\"TeacherEmail\"\r\n  //         label=\"Teacher ID\"\r\n  //         name=\"email\"\r\n  //         autoComplete=\"email\"\r\n  //         autoFocus\r\n  //         value = {email}\r\n  //         onChange = {onChange}\r\n         \r\n  //       />\r\n\r\n  //       <TextField\r\n  //         variant=\"standard\"\r\n  //         margin=\"normal\"\r\n  //         id=\"standard-si\r\n  //         ze-small\"\r\n  //         size=\"small\"\r\n  //         required\r\n  //         fullWidth\r\n  //         name=\"password\"\r\n  //         label=\"Password\"\r\n  //         type=\"password\"\r\n  //         id=\"TeacherPass\"\r\n  //         autoComplete=\"current-password\"\r\n  //         value = {password}\r\n  //         onChange = {onChange}\r\n         \r\n  //       />\r\n\r\n  //       <Button\r\n  //         type=\"submit\"\r\n  //         fullWidth\r\n  //         variant=\"contained\"\r\n  //         color=\"secondary\"\r\n  //         className={classes.submit}\r\n  //       >\r\n  //         Sign In\r\n  //       </Button>\r\n  //       {error && <Typography variant=\"body2\" className={classes.error}>Username or Password is incorrect!</Typography>}\r\n  //       <Grid container>\r\n  //         <Grid item xs>\r\n  //           <Link href=\"\" variant=\"body2\">\r\n  //             Forgot password?\r\n  //           </Link>\r\n  //         </Grid>\r\n  //       </Grid>\r\n  //     </form>\r\n  //   );\r\n  // } else {\r\n  //   return (\r\n  //     <form className={classes.form} noValidate autoComplete=\"off\" onSubmit={onSubmitHandler}>\r\n  //       <TextField\r\n  //         variant=\"standard\"\r\n  //         margin=\"normal\"\r\n  //         id=\"standard-size-small\"\r\n  //         size=\"small\"\r\n  //         required\r\n  //         fullWidth\r\n  //         id=\"AdminEmail\"\r\n  //         label=\"Admin ID\"\r\n  //         name=\"email\"\r\n  //         autoComplete=\"email\"\r\n  //         autoFocus\r\n  //         value={email}\r\n  //         onChange = {onChange}\r\n  //       />\r\n\r\n  //       <TextField\r\n  //         variant=\"standard\"\r\n  //         margin=\"normal\"\r\n  //         id=\"standard-size-small\"\r\n  //         size=\"small\"\r\n  //         required\r\n  //         fullWidth\r\n  //         name=\"password\"\r\n  //         label=\"Password\"\r\n  //         type=\"password\"\r\n  //         id=\"AdminPass\"\r\n  //         autoComplete=\"current-password\"\r\n  //         value={password}\r\n  //         onChange = {onChange}\r\n  //       />\r\n\r\n  //       <Button\r\n  //         type=\"submit\"\r\n  //         fullWidth\r\n  //         variant=\"contained\"\r\n  //         color=\"secondary\"\r\n  //         className={classes.submit}\r\n  //       >\r\n  //         Sign In\r\n  //       </Button>\r\n  //       {error && <Typography variant=\"body2\"  className={classes.error}>Username or Password is incorrect!</Typography>}\r\n  //     </form>\r\n"]},"metadata":{},"sourceType":"module"}